#+TITLE: Andrew Soutar's Emacs Config
#+AUTHOR: Andrew Soutar <andrew@andrewsoutar.com>
#+STARTUP: indent

* Trivia
** Set up directories for future use
#+begin_src elisp
  (defun getenv-dir (env-var default)
    (expand-file-name (or (getenv env-var) default)))

  (defvar xdg-config-home (getenv-dir "XDG_CONFIG_HOME" "~/.config/"))
  (defvar xdg-cache-home (getenv-dir "XDG_CACHE_HOME" "~/.cache/"))
  (defvar xdg-data-home (getenv-dir "XDG_DATA_HOME" "~/.local/share/"))

  (defun get-expanded-path (path xdg-dir)
    (let ((base (expand-file-name "emacs/" xdg-dir)))
      (if path (expand-file-name path base) base)))

  (defun emacs-config-path (&optional path)
    (get-expanded-path path xdg-config-home))
  (defun emacs-cache-path (&optional path)
    (get-expanded-path path xdg-cache-home))
  (defun emacs-data-path (&optional path)
    (get-expanded-path path xdg-data-home))

  (setf user-emacs-directory (emacs-data-path))
#+end_src
** Bootstrap [[https://github.com/raxod502/straight.el][straight.el]]
#+begin_src elisp
  (defvar straight-base-dir (emacs-cache-path))
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" straight-base-dir))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
** Setup for ~use-package~
#+begin_src elisp
  (straight-use-package 'use-package)
  (use-package use-package
    :straight t
    :custom (use-package-always-defer t))
#+end_src
** Use a different custom file
#+begin_src elisp
  (use-package emacs
    :custom (custom-file (emacs-config-path "custom.el"))
    :config (load custom-file 'noerror nil 'nosuffix))
#+end_src
** Basic setup
#+begin_src elisp
  (use-package emacs
    :custom
    (make-backup-files nil))
#+end_src
* Theme and Visuals
#+begin_src elisp
  (use-package emacs
    :custom
    (menu-bar-mode nil)
    (tool-bar-mode nil)
    (scroll-bar-mode nil))

  (use-package solarized-theme
    :straight t
    :init (load-theme 'solarized-dark t))
#+end_src
* TRAMP
#+begin_src elisp
  (use-package tramp
    :custom
    (tramp-default-method "ssh"))
#+end_src
* Lisp Stuff
** Paredit
#+begin_src elisp
  (use-package paredit
    :straight t
    :hook
    (lisp-mode . paredit-mode)
    (emacs-lisp-mode . paredit-mode))
#+end_src
* Magit
#+begin_src elisp
  (use-package magit
    :straight t)
#+end_src
